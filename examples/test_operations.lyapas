print(a/)
    10⇒q 0⇒j @+F1(100)
    §1 a;q⇒b a/q⇒a 48+b@>F1 1+j⇒j ↑(a≠0)1 
    §2 0⇒i j-1⇒j ↑(j=0)4 
    §3 F1i⇒t F1j⇒F1i t⇒F1j i+1⇒i j-1⇒j ↑(i<j)3
    §4 10@>F1 /F1>C
**

println(/)
    *print(777/)
**

test_set_min_and_set_max(/)
    /'-----------------------'>C *println(/)
    /'set_min '>C                *println(/)
    /'-----------------------'>C *println(/)

    @+F1(1)

    0⇒a
    /'0 == '>C *print(a/)

    Oa
    /'0 == '>C *print(a/)

    OF1.0
    F1.0⇒a
    /'0 == '>C *print(a/)

    /'-----------------------'>C *println(/)
    /'set_max'>C                 *println(/)
    /'-----------------------'>C *println(/)
    18446744073709551615⇒a
    /'18446744073709551615 == '>C *print(a/)

    ⁻a
    /'18446744073709551615 == '>C *print(a/)

    ⁻F1.0
    F1.0⇒a
    /'255 == '>C *print(a/)
**

test_random(/)
    /'-----------------------'>C *println(/)
    /'random  '>C                *println(/)
    /'-----------------------'>C *println(/)
    
    T⇒s
    /'seconds '>C *print(s/)

    s⇒X
    X⇒r /'random number '>C *print(r/)
    X⇒r /'random number '>C *print(r/)
    X⇒r /'random number '>C *print(r/)
**

test_get_number_least_1(/)
    /'-----------------------'>C *println(/)
    0⇒a
    *print(a/)
    a!⇒a
    /'rightest one: '>C *print(a/)

    /'-----------------------'>C *println(/)
    1⇒a
    *print(a/)
    a!⇒a
    /'rightest one: '>C *print(a/)

    /'-----------------------'>C *println(/)
    2⇒a
    *print(a/)
    a!⇒a
    /'rightest one: '>C *print(a/)

    /'-----------------------'>C *println(/)
    2048⇒a
    *print(a/)
    a!⇒a
    /'rightest one: '>C *print(a/)

    /'-----------------------'>C *println(/)
    2147483648⇒a
    *print(a/)
    a!⇒a
    /'rightest one: '>C *print(a/)

    /'-----------------------'>C *println(/)
    4294967296⇒a
    *print(a/)
    a!⇒a
    /'rightest one: '>C *print(a/)
**

test_weight(/)
    /'-----------------------'>C *println(/)
    0⇒a
    *print(a/)
    a%⇒a
    /'weight: '>C *print(a/)

    /'-----------------------'>C *println(/)
    1⇒a
    *print(a/)
    a%⇒a
    /'weight: '>C *print(a/)

    /'-----------------------'>C *println(/)
    255⇒a
    *print(a/)
    a%⇒a
    /'weight: '>C *print(a/)

    /'-----------------------'>C *println(/)
    2048⇒a
    *print(a/)
    a%⇒a
    /'weight: '>C *print(a/)

    /'-----------------------'>C *println(/)
    2147483648⇒a
    *print(a/)
    a%⇒a
    /'weight: '>C *print(a/)

    /'-----------------------'>C *println(/)
    4294967296⇒a
    *print(a/)
    a%⇒a
    /'weight: '>C *print(a/)
**

helper_enumeration(a/)
    /'number: '>C *println(/)
    *print(a/)
    /'indexes: '>C *println(/)
    §11 ↑X12ai *print(i/) →11
    §12
**

test_asm(/)
    777⇒a
    {mov QWORD [rsp], 0}
    {mov QWORD [rsp + 8], 0}
    /'number must be zero: '>C *println(/)
    *print(a/)
**

test_enumeration(/)
    *helper_enumeration(0/)
    *helper_enumeration(17/)
    *helper_enumeration(255/)
    *helper_enumeration(1024/)
**

test_jumps(/)
    /'-----------------------'>C *println(/)
    /'test jumps '>C             *println(/)
    /'-----------------------'>C *println(/)
    →21
    /'error'>C
    §21

    777⇒a
    ↦22
    /'error'>C
    §22

    0⇒a
    ↪23
    /'error'>C
    §23

    /'all right'>C *println(/)
**

test_operations(/)
    /'-----------------------'>C *println(/)
    /'test operations '>C        *println(/)
    /'-----------------------'>C *println(/)

    42⇒a
    /'a = '>C *print(a/)

    12⇒b
    /'b = '>C *print(b/)

    a+b⇒c
    /'a + b = '>C *print(c/)

    a-b⇒c
    /'a - b = '>C *print(c/)

    a-b⇒c
    /'a - b = '>C *print(c/)

    a¬⇒c
    /'not a = '>C *print(c/)

    ∆a
    /'inc a = '>C *print(a/)

    ∇a
    /'dec a = '>C *print(a/)

    a∨b⇒c
    /'a | b = '>C *print(c/)

    a&b⇒c
    /'a & b = '>C *print(c/)

    a⊕b⇒c
    /'a ^ b = '>C *print(c/)

    a<1⇒c
    /'a < 1 = '>C *print(c/)

    a>2⇒c
    /'a > 2 = '>C *print(c/)
**

main(/)
    *test_set_min_and_set_max(/)
    *test_random(/)
    *test_get_number_least_1(/)
    *test_weight(/)
    *test_enumeration(/)
    *test_asm(/)
    *test_jumps(/)
    *test_operations(/)
**

